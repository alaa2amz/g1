package main

import (
	"fmt"
	"github.com/gin-gonic/gin"
	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
	"log"
	"strconv"
)

var db *gorm.DB
var dberr error

type Post struct {
	ID      uint    `form:"id" gorm:"primaryKey"`
	Title   string  `form:"title"`
	Content string  `form:"content"`
	Afloat  float64 `form:"afloat"`
}

func main() {

	fmt.Println("Hello, Web!")
	db, dberr = gorm.Open(sqlite.Open("db.sqlite"))
	if dberr != nil {
		log.Fatal(dberr)
	} else {
		fmt.Println("ok")
	}
	
	db.AutoMigrate(&Post{})
	
	r := gin.Default()
	r.GET("/", home)
	r.GET("/post", rtPost)
	r.POST("/post", crPost)
	r.PATCH("/post/:id", upPost)
	r.DELETE("/post/:id", dlPost)
	r.Run()
}

func home(c *gin.Context) {
	c.String(200, "Marhabah")
}

func crPost(c *gin.Context) {
	var p Post
	c.Bind(&p)
	r := db.Create(&p)
	c.Writer.Write([]byte(fmt.Sprintf("%+v\n", r)))
	c.JSON(200, gin.H{"p": p})
}

func rtPost(c *gin.Context) {
	var p []Post
	r := db.Find(&p)
	c.Writer.Write([]byte(fmt.Sprintf("%+v\n", r)))
	c.JSON(200, gin.H{"p": p})
}

func upPost(c *gin.Context) {
	var p Post
	id := c.Param("id")
	c.Bind(&p)
	intid, _ := strconv.Atoi(id)
	p.ID = uint(intid)
	r := db.Save(&p)
	c.Writer.Write([]byte(fmt.Sprintf("%+v\n", r)))
	c.JSON(200, gin.H{"p": p})
}

func dlPost(c *gin.Context) {
	var p Post
	id := c.Param("id")
	c.Bind(&p)
	intid, _ := strconv.Atoi(id)
	p.ID = uint(intid)
	r := db.Delete(&Post{}, id)
	c.Writer.Write([]byte(fmt.Sprintf("%+v\n", r)))
	c.JSON(200, gin.H{"p": p})
}
